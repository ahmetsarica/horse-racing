{
    "sourceFile": "src/components/raceContainer/RaceContainer.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1732221951573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732221959734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n                 }}</span>\r\n               </div>\r\n               <div class=\"bg-gray-300 text-black flex w-[700px] items-center\">\r\n                 <div\r\n-                  :class=\"['flex flex-col items-start']\"\r\n+                  class='flex flex-col items-start\"\r\n                   :style=\"{\r\n                     transition: isRaceInProgress\r\n                       ? `transform ${raceHorse.duration}s linear`\r\n                       : '',\r\n"
                },
                {
                    "date": 1732221968733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,12 @@\n                 }}</span>\r\n               </div>\r\n               <div class=\"bg-gray-300 text-black flex w-[700px] items-center\">\r\n                 <div\r\n-                  class='flex flex-col items-start\"\r\n+                  :class=\"[\r\n+                    'flex flex-col items-start',\r\n+                    { 'move-to-end': isRaceInProgress },\r\n+                  ]\"\r\n                   :style=\"{\r\n                     transition: isRaceInProgress\r\n                       ? `transform ${raceHorse.duration}s linear`\r\n                       : '',\r\n@@ -92,8 +95,9 @@\n       if (!currentRace.value) return;\r\n       isRaceInProgress.value = true;\r\n \r\n       // Calculate the longest duration to determine the race duration\r\n+      console.log('currentrace:', currentRace);\r\n       const longestDuration = Math.max(\r\n         ...currentRace.value.raceHorses.map((horse: RaceHorse) =>\r\n           parseFloat(horse.duration)\r\n         )\r\n"
                }
            ],
            "date": 1732221951573,
            "name": "Commit-0",
            "content": "<template>\r\n  <div class=\"h-full\">\r\n    <div v-if=\"currentRace\">\r\n      <div class=\"text-center mb-4 font-bold text-lg uppercase\">\r\n        Lap: {{ currentRace?.lapIndex }} - {{ currentRace?.lapLength }}\r\n      </div>\r\n      <div class=\"flex h-[768px]\">\r\n        <div class=\"flex flex-col gap-2\">\r\n          <div\r\n            class=\"flex flex-col w-full justify-between h-[70px]\"\r\n            v-for=\"(raceHorse, index) in currentRace.raceHorses\"\r\n            :key=\"index\"\r\n          >\r\n            <div class=\"flex h-full\">\r\n              <div\r\n                class=\"bg-blue-500 text-white w-10 flex items-center justify-center\"\r\n              >\r\n                <span class=\"transform -rotate-90 inline-block\">{{\r\n                  index + 1\r\n                }}</span>\r\n              </div>\r\n              <div class=\"bg-gray-300 text-black flex w-[700px] items-center\">\r\n                <div\r\n                  :class=\"[\r\n                    'flex flex-col items-start',\r\n                  ]\"\r\n                  :style=\"{\r\n                    transition: isRaceInProgress\r\n                      ? `transform ${raceHorse.duration}s linear`\r\n                      : '',\r\n                    transform: isRaceInProgress\r\n                      ? `translateX(700px)`\r\n                      : `translateX(0)`,\r\n                  }\"\r\n                >\r\n                  <font-awesome-icon\r\n                    icon=\"horse\"\r\n                    :style=\"{ color: raceHorse.color, fontSize: '32px' }\"\r\n                  />\r\n                  <span class=\"font-bold\" :style=\"{ color: raceHorse.color }\">{{\r\n                    raceHorse.name\r\n                  }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"bg-red-500 h-full flex items-center justify-center\">\r\n          <span class=\"transform -rotate-90 inline-block text-white text-2xl\"\r\n            >Finish Line</span\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <BlankPage\r\n      v-else\r\n      title=\"No Race Found\"\r\n      description=\"To view the race, please click the Generate Program button.\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Program } from '@/store/modules/program';\r\nimport { Race, RaceHorse } from '@/store/modules/race';\r\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\r\nimport BlankPage from '@/components/blankPage/BlankPage.vue';\r\n\r\nimport { defineComponent, ref, watch, watchEffect } from 'vue';\r\nimport { useStore } from 'vuex';\r\n\r\nexport default defineComponent({\r\n  name: 'RaceContainer',\r\n  components: {\r\n    FontAwesomeIcon,\r\n    BlankPage,\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const programList = ref<Program[]>([]);\r\n    const currentRace = ref<Race>();\r\n    const isRaceInProgress = ref(false);\r\n    const isRaceStarted = ref(false);\r\n    const raceCount = ref(0);\r\n\r\n    watchEffect(() => {\r\n      programList.value = store.getters['getProgramList'];\r\n      currentRace.value = store.getters['getCurrentRace'];\r\n      isRaceStarted.value = store.getters['getIsRaceStarted'];\r\n      isRaceInProgress.value = store.getters['getIsRaceInProgress'];\r\n    });\r\n\r\n    const startRace = async () => {\r\n      if (!currentRace.value) return;\r\n      isRaceInProgress.value = true;\r\n\r\n      // Calculate the longest duration to determine the race duration\r\n      const longestDuration = Math.max(\r\n        ...currentRace.value.raceHorses.map((horse: RaceHorse) =>\r\n          parseFloat(horse.duration)\r\n        )\r\n      );\r\n\r\n      await new Promise((resolve) =>\r\n        setTimeout(resolve, longestDuration * 1000)\r\n      );\r\n\r\n      if (isRaceStarted.value) {\r\n        addToResults();\r\n        await store.dispatch('setCurrentRace', raceCount.value + 1);\r\n        raceCount.value += 1;\r\n      }\r\n      isRaceInProgress.value = false;\r\n    };\r\n\r\n    const stopRace = () => {\r\n      store.dispatch('setIsRaceStarted', false);\r\n      store.dispatch('setIsRaceInProgress', false);\r\n\r\n      raceCount.value = 0;\r\n    };\r\n\r\n    const addToResults = () => {\r\n      const sortedRaceHorses = currentRace.value?.raceHorses.sort(\r\n        (a, b) => parseFloat(a.duration) - parseFloat(b.duration)\r\n      );\r\n      const result = {\r\n        lapIndex: currentRace.value?.lapIndex,\r\n        lapLength: currentRace.value?.lapLength,\r\n        raceHorses: sortedRaceHorses?.map((horse, index) => ({\r\n          position: index + 1,\r\n          name: horse.name,\r\n          duration: horse.duration,\r\n        })),\r\n      };\r\n\r\n      store.dispatch('addResult', result);\r\n    };\r\n\r\n    watch(\r\n      () => store.state.race.isRaceStarted,\r\n      (newValue) => {\r\n        if (newValue) {\r\n          startRace();\r\n        }\r\n      }\r\n    );\r\n\r\n    watch(\r\n      () => [store.state.race.isRaceStarted, isRaceInProgress.value],\r\n      ([newValue, isRaceInProgressValue]) => {\r\n        if (newValue && !isRaceInProgressValue) {\r\n          setTimeout(() => {\r\n            if (raceCount.value < 6) {\r\n              // start next lap\r\n              startRace();\r\n            } else {\r\n              stopRace();\r\n            }\r\n          }, 100);\r\n        }\r\n      }\r\n    );\r\n\r\n    return {\r\n      programList,\r\n      currentRace,\r\n      isRaceInProgress,\r\n      raceCount,\r\n      isRaceStarted,\r\n    };\r\n  },\r\n});\r\n</script>\r\n"
        }
    ]
}
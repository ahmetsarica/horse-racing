{
    "sourceFile": "tests/unit/RaceResults/RaceResults.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1732223062645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732223091470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,73 +1,73 @@\n-// import { mount, VueWrapper } from '@vue/test-utils';\r\n-// import { createStore, Store } from 'vuex';\r\n-// import RaceResults from '@/components/raceResults/RaceResults.vue';\r\n-// import BlankPage from '@/components/blankPage/BlankPage.vue';\r\n+import { mount, VueWrapper } from '@vue/test-utils';\r\n+import { createStore, Store } from 'vuex';\r\n+import RaceResults from '@/components/raceResults/RaceResults.vue';\r\n+import BlankPage from '@/components/blankPage/BlankPage.vue';\r\n \r\n-// interface State {\r\n-//   resultList: any[];\r\n-// }\r\n+interface State {\r\n+  resultList: any[];\r\n+}\r\n \r\n-// describe('RaceResults.vue', () => {\r\n-//   let store: Store<State>;\r\n-//   let wrapper: VueWrapper<any>;\r\n+describe('RaceResults.vue', () => {\r\n+  let store: Store<State>;\r\n+  let wrapper: VueWrapper<any>;\r\n \r\n-//   beforeEach(() => {\r\n-//     store = createStore<State>({\r\n-//       state: {\r\n-//         resultList: [],\r\n-//       },\r\n-//       getters: {\r\n-//         getAllResults: (state) => state.resultList,\r\n-//       },\r\n-//     });\r\n+  beforeEach(() => {\r\n+    store = createStore<State>({\r\n+      state: {\r\n+        resultList: [],\r\n+      },\r\n+      getters: {\r\n+        getAllResults: (state) => state.resultList,\r\n+      },\r\n+    });\r\n \r\n-//     wrapper = mount(RaceResults, {\r\n-//       global: {\r\n-//         plugins: [store],\r\n-//       },\r\n-//     });\r\n-//   });\r\n+    wrapper = mount(RaceResults, {\r\n+      global: {\r\n+        plugins: [store],\r\n+      },\r\n+    });\r\n+  });\r\n \r\n-//   it('renders BlankPage when there are no results', () => {\r\n-//     expect(wrapper.findComponent(BlankPage).exists()).toBe(true);\r\n-//     expect(wrapper.findComponent(BlankPage).props('title')).toBe(\r\n-//       'No Results Found'\r\n-//     );\r\n-//     expect(wrapper.findComponent(BlankPage).props('description')).toBe(\r\n-//       \"Don't worry, reports will appear after you click start!\"\r\n-//     );\r\n-//   });\r\n+  it('renders BlankPage when there are no results', () => {\r\n+    expect(wrapper.findComponent(BlankPage).exists()).toBe(true);\r\n+    expect(wrapper.findComponent(BlankPage).props('title')).toBe(\r\n+      'No Results Found'\r\n+    );\r\n+    expect(wrapper.findComponent(BlankPage).props('description')).toBe(\r\n+      \"Don't worry, reports will appear after you click start!\"\r\n+    );\r\n+  });\r\n \r\n-//   it('renders result list when there are results', async () => {\r\n-//     const resultList = [\r\n-//       {\r\n-//         lapIndex: 1,\r\n-//         lapLength: '1200m',\r\n-//         raceHorses: [\r\n-//           { id: 1, name: 'Horse 1', duration: 1 },\r\n-//           { id: 2, name: 'Horse 2', duration: 1 },\r\n-//         ],\r\n-//       },\r\n-//     ];\r\n+  it('renders result list when there are results', async () => {\r\n+    const resultList = [\r\n+      {\r\n+        lapIndex: 1,\r\n+        lapLength: '1200m',\r\n+        raceHorses: [\r\n+          { id: 1, name: 'Horse 1', duration: 1 },\r\n+          { id: 2, name: 'Horse 2', duration: 1 },\r\n+        ],\r\n+      },\r\n+    ];\r\n \r\n-//     // Simulate the delay in generating results\r\n-//     setTimeout(async () => {\r\n-//       store.state.resultList = resultList;\r\n-//       await wrapper.vm.$nextTick();\r\n+    // Simulate the delay in generating results\r\n+    setTimeout(async () => {\r\n+      store.state.resultList = resultList;\r\n+      await wrapper.vm.$nextTick();\r\n \r\n-//       expect(wrapper.find('.text-center.mb-4.font-bold.text-xl').text()).toBe(\r\n-//         'RESULTS'\r\n-//       );\r\n-//       expect(wrapper.findAll('[data-test=\"race-item\"]').length).toBe(1);\r\n-//       expect(\r\n-//         wrapper\r\n-//           .find('.text-center.font-bold.text-lg.bg-gray-400.text-white')\r\n-//           .text()\r\n-//       ).toBe('Lap: 1 - 1200m');\r\n+      expect(wrapper.find('.text-center.mb-4.font-bold.text-xl').text()).toBe(\r\n+        'RESULTS'\r\n+      );\r\n+      expect(wrapper.findAll('[data-test=\"race-item\"]').length).toBe(1);\r\n+      expect(\r\n+        wrapper\r\n+          .find('.text-center.font-bold.text-lg.bg-gray-400.text-white')\r\n+          .text()\r\n+      ).toBe('Lap: 1 - 1200m');\r\n \r\n-//       const rows = wrapper.findAll('tbody tr');\r\n-//       expect(rows[0].findAll('td')[1].text()).toBe('Horse 1');\r\n-//       expect(rows[1].findAll('td')[1].text()).toBe('Horse 2');\r\n-//     }, 2000);\r\n-//   });\r\n-// });\r\n+      const rows = wrapper.findAll('tbody tr');\r\n+      expect(rows[0].findAll('td')[1].text()).toBe('Horse 1');\r\n+      expect(rows[1].findAll('td')[1].text()).toBe('Horse 2');\r\n+    }, 2000);\r\n+  });\r\n+});\r\n"
                },
                {
                    "date": 1732228148397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n }\r\n \r\n describe('RaceResults.vue', () => {\r\n   let store: Store<State>;\r\n-  let wrapper: VueWrapper<any>;\r\n+  let wrapper: VueWrapper<unknown>;\r\n \r\n   beforeEach(() => {\r\n     store = createStore<State>({\r\n       state: {\r\n"
                },
                {
                    "date": 1732228225318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n import { mount, VueWrapper } from '@vue/test-utils';\r\n import { createStore, Store } from 'vuex';\r\n import RaceResults from '@/components/raceResults/RaceResults.vue';\r\n import BlankPage from '@/components/blankPage/BlankPage.vue';\r\n+import { Result } from '@/store/modules/results';\r\n \r\n interface State {\r\n-  resultList: any[];\r\n+  resultList: Result[];\r\n }\r\n \r\n describe('RaceResults.vue', () => {\r\n   let store: Store<State>;\r\n"
                },
                {
                    "date": 1732228292782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n       {\r\n         lapIndex: 1,\r\n         lapLength: '1200m',\r\n         raceHorses: [\r\n-          { id: 1, name: 'Horse 1', duration: 1 },\r\n+          { id: 1, name: 'Horse 1', condition: 1, color: 'red', duration: 1 },\r\n           { id: 2, name: 'Horse 2', duration: 1 },\r\n         ],\r\n       },\r\n     ];\r\n"
                },
                {
                    "date": 1732228301842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n       {\r\n         lapIndex: 1,\r\n         lapLength: '1200m',\r\n         raceHorses: [\r\n-          { id: 1, name: 'Horse 1', condition: 1, color: 'red', duration: 1 },\r\n-          { id: 2, name: 'Horse 2', condition: 1, color: 'red', duration: 1 },\r\n+          { id: 1, name: 'Horse 1', condition: 20, color: 'red', duration: 1 },\r\n+          { id: 2, name: 'Horse 2', condition: 80, color: 'yellow', duration: 1 },\r\n         ],\r\n       },\r\n     ];\r\n \r\n"
                },
                {
                    "date": 1732228320108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,15 +44,15 @@\n       {\r\n         lapIndex: 1,\r\n         lapLength: '1200m',\r\n         raceHorses: [\r\n-          { id: 1, name: 'Horse 1', condition: 20, color: 'red', duration: 1 },\r\n+          { id: 1, name: 'Horse 1', condition: 20, color: 'red', duration: '1' },\r\n           {\r\n             id: 2,\r\n             name: 'Horse 2',\r\n             condition: 80,\r\n             color: 'yellow',\r\n-            duration: 1,\r\n+            duration: '1',\r\n           },\r\n         ],\r\n       },\r\n     ];\r\n"
                }
            ],
            "date": 1732223062645,
            "name": "Commit-0",
            "content": "// import { mount, VueWrapper } from '@vue/test-utils';\r\n// import { createStore, Store } from 'vuex';\r\n// import RaceResults from '@/components/raceResults/RaceResults.vue';\r\n// import BlankPage from '@/components/blankPage/BlankPage.vue';\r\n\r\n// interface State {\r\n//   resultList: any[];\r\n// }\r\n\r\n// describe('RaceResults.vue', () => {\r\n//   let store: Store<State>;\r\n//   let wrapper: VueWrapper<any>;\r\n\r\n//   beforeEach(() => {\r\n//     store = createStore<State>({\r\n//       state: {\r\n//         resultList: [],\r\n//       },\r\n//       getters: {\r\n//         getAllResults: (state) => state.resultList,\r\n//       },\r\n//     });\r\n\r\n//     wrapper = mount(RaceResults, {\r\n//       global: {\r\n//         plugins: [store],\r\n//       },\r\n//     });\r\n//   });\r\n\r\n//   it('renders BlankPage when there are no results', () => {\r\n//     expect(wrapper.findComponent(BlankPage).exists()).toBe(true);\r\n//     expect(wrapper.findComponent(BlankPage).props('title')).toBe(\r\n//       'No Results Found'\r\n//     );\r\n//     expect(wrapper.findComponent(BlankPage).props('description')).toBe(\r\n//       \"Don't worry, reports will appear after you click start!\"\r\n//     );\r\n//   });\r\n\r\n//   it('renders result list when there are results', async () => {\r\n//     const resultList = [\r\n//       {\r\n//         lapIndex: 1,\r\n//         lapLength: '1200m',\r\n//         raceHorses: [\r\n//           { id: 1, name: 'Horse 1', duration: 1 },\r\n//           { id: 2, name: 'Horse 2', duration: 1 },\r\n//         ],\r\n//       },\r\n//     ];\r\n\r\n//     // Simulate the delay in generating results\r\n//     setTimeout(async () => {\r\n//       store.state.resultList = resultList;\r\n//       await wrapper.vm.$nextTick();\r\n\r\n//       expect(wrapper.find('.text-center.mb-4.font-bold.text-xl').text()).toBe(\r\n//         'RESULTS'\r\n//       );\r\n//       expect(wrapper.findAll('[data-test=\"race-item\"]').length).toBe(1);\r\n//       expect(\r\n//         wrapper\r\n//           .find('.text-center.font-bold.text-lg.bg-gray-400.text-white')\r\n//           .text()\r\n//       ).toBe('Lap: 1 - 1200m');\r\n\r\n//       const rows = wrapper.findAll('tbody tr');\r\n//       expect(rows[0].findAll('td')[1].text()).toBe('Horse 1');\r\n//       expect(rows[1].findAll('td')[1].text()).toBe('Horse 2');\r\n//     }, 2000);\r\n//   });\r\n// });\r\n"
        }
    ]
}
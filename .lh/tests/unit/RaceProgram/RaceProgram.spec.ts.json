{
    "sourceFile": "tests/unit/RaceProgram/RaceProgram.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732228140425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732228140425,
            "name": "Commit-0",
            "content": "import { mount, VueWrapper } from '@vue/test-utils';\r\nimport { createStore, Store } from 'vuex';\r\nimport RaceProgram from '@/components/raceProgram/RaceProgram.vue';\r\nimport BlankPage from '@/components/blankPage/BlankPage.vue';\r\nimport { Program } from '@/store/modules/program';\r\n\r\ninterface State {\r\n  programList: Program[];\r\n}\r\n\r\ndescribe('RaceProgram.vue', () => {\r\n  let store: Store<State>;\r\n  let wrapper: VueWrapper<unknown>;\r\n\r\n  beforeEach(() => {\r\n    store = createStore<State>({\r\n      state: {\r\n        programList: [],\r\n      },\r\n      getters: {\r\n        getProgramList: (state) => state.programList,\r\n      },\r\n    });\r\n\r\n    wrapper = mount(RaceProgram, {\r\n      global: {\r\n        plugins: [store],\r\n      },\r\n    });\r\n  });\r\n\r\n  it('renders BlankPage when there are no programs', () => {\r\n    expect(wrapper.findComponent(BlankPage).exists()).toBe(true);\r\n    expect(wrapper.findComponent(BlankPage).props('title')).toBe(\r\n      'No Program Found'\r\n    );\r\n    expect(wrapper.findComponent(BlankPage).props('description')).toBe(\r\n      'Please click the Generate Program button to create a program'\r\n    );\r\n  });\r\n\r\n  it('renders program list when there are programs', async () => {\r\n    const programList: Program[] = [\r\n      {\r\n        index: 0,\r\n        horses: [\r\n          { id: 1, name: 'Horse 1', condition: 5, color: 'brown' },\r\n          { id: 2, name: 'Horse 2', condition: 4, color: 'black' },\r\n        ],\r\n        lapIndex: 1,\r\n        lapLength: '1200m',\r\n      },\r\n    ];\r\n\r\n    store.state.programList = programList;\r\n    await wrapper.vm.$nextTick();\r\n\r\n    expect(wrapper.find('.text-center.font-bold.text-xl.mb-4').text()).toBe(\r\n      'PROGRAM'\r\n    );\r\n    expect(wrapper.findAll('[data-test=\"race-item\"]').length).toBe(1);\r\n    expect(\r\n      wrapper\r\n        .find('.text-center.font-bold.text-lg.bg-gray-400.text-white')\r\n        .text()\r\n    ).toBe('Lap:1 - 1200m');\r\n\r\n    const rows = wrapper.findAll('tbody tr');\r\n    expect(rows[0].findAll('td')[1].text()).toBe('Horse 1');\r\n    expect(rows[1].findAll('td')[1].text()).toBe('Horse 2');\r\n  });\r\n});\r\n"
        }
    ]
}